/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Valentina
 */
public class Formulario extends javax.swing.JFrame {

    ArrayList<Alumno> listaAlumnos = new ArrayList<Alumno>();
    ArrayList<Profesor> listaProfesores = new ArrayList<Profesor>();
    
    public Formulario() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtDireccion = new javax.swing.JTextField();
        rBtnProfesor = new javax.swing.JRadioButton();
        rBtnAlumno = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Departamento = new javax.swing.JLabel();
        txtIdProfesor = new javax.swing.JTextField();
        txtTitulo = new javax.swing.JTextField();
        txtDepartamento = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtIdAlumno = new javax.swing.JTextField();
        txtA単oIngreso = new javax.swing.JTextField();
        txtCarrera = new javax.swing.JTextField();
        btnInsertar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnCargarTabla = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProfesor = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAlumno = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nombre");

        jLabel2.setText("Apellido");

        jLabel3.setText("Direccion");

        txtApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellidoActionPerformed(evt);
            }
        });

        buttonGroup1.add(rBtnProfesor);
        rBtnProfesor.setText("Profesor");
        rBtnProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnProfesorActionPerformed(evt);
            }
        });

        buttonGroup1.add(rBtnAlumno);
        rBtnAlumno.setText("Alumno");
        rBtnAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnAlumnoActionPerformed(evt);
            }
        });

        jLabel5.setText("IdProfesor");

        jLabel6.setText("Titulo");

        Departamento.setText("Departamento");

        txtIdProfesor.setEnabled(false);

        txtTitulo.setEnabled(false);

        txtDepartamento.setEnabled(false);

        jLabel8.setText("IdAlumno");

        jLabel9.setText("A単o Ingreso");

        jLabel10.setText("Carrera");

        txtIdAlumno.setEnabled(false);

        txtA単oIngreso.setEnabled(false);

        txtCarrera.setEnabled(false);
        txtCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCarreraActionPerformed(evt);
            }
        });

        btnInsertar.setText("Insertar");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnCargarTabla.setText("Cargar Tabla");
        btnCargarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarTablaActionPerformed(evt);
            }
        });

        tblProfesor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblProfesor);

        tblAlumno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblAlumno);

        jLabel4.setText("Seleccione uno de los botones antes de realizar una accion");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(Departamento))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtIdProfesor, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                                        .addComponent(txtDepartamento))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(14, 14, 14))))
                            .addComponent(rBtnProfesor)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(btnInsertar)
                                .addGap(39, 39, 39)
                                .addComponent(btnBorrar)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rBtnAlumno)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(31, 31, 31)
                                        .addComponent(txtIdAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel10))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtA単oIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addComponent(btnCargarTabla)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(33, 33, 33)
                                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rBtnProfesor)
                    .addComponent(rBtnAlumno))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 61, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtIdProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(txtIdAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(txtA単oIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Departamento)
                            .addComponent(txtDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(txtCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnInsertar)
                            .addComponent(btnBorrar)
                            .addComponent(btnCargarTabla))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApellidoActionPerformed

    private void rBtnAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnAlumnoActionPerformed
        if (rBtnAlumno.isSelected() == true) {
            txtIdAlumno.setEnabled(true);
            txtA単oIngreso.setEnabled(true);
            txtCarrera.setEnabled(true);
            txtIdProfesor.setEnabled(false);
            txtTitulo.setEnabled(false);
            txtDepartamento.setEnabled(false);
        }
    }//GEN-LAST:event_rBtnAlumnoActionPerformed

    private void rBtnProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnProfesorActionPerformed
        if (rBtnProfesor.isSelected() == true) {
            txtIdProfesor.setEnabled(true);
            txtTitulo.setEnabled(true);
            txtDepartamento.setEnabled(true);
            txtIdAlumno.setEnabled(false);
            txtA単oIngreso.setEnabled(false);
            txtCarrera.setEnabled(false);
        }
    }//GEN-LAST:event_rBtnProfesorActionPerformed

    private void txtCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCarreraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCarreraActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
      
        if (rBtnAlumno.isSelected()== true) {
            borrarAlumno();
        } else{
            borrarProfesor();
        } 
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed

        if (rBtnAlumno.isSelected() == true) {
            agregarAlumno();
        } else {
            agregarProfesor();
        }    
    }//GEN-LAST:event_btnInsertarActionPerformed

    private void btnCargarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarTablaActionPerformed
        
        if (rBtnAlumno.isSelected() == true) {
            cargarListaAlumnos();
            cargarDatosTablaAlumno();
            limpiar();
        } else{
            cargarListaProfesores();
            cargarDatosTablaProfesor();
            limpiar();
        }
       
       
    }//GEN-LAST:event_btnCargarTablaActionPerformed

   public class Conexion {
        public String driver = "com.mysql.cj.jdbc.Driver";
        public String dataBase = "universidad";
        public String hostname = "localhost";
        public String port = "3306";
        public String url = "jdbc:mysql://"+ hostname + ":"+ port + "/" + dataBase + "?useSSL=false";
        public String username = "root";
        public String password = "RaMaPo20+";


        public Connection getConexion(){
            Connection con = null;
            try{
                Class.forName(driver);
                con = (Connection)DriverManager.getConnection(url, username, password);
            }catch (Exception e){
                e.printStackTrace();
            }
            return con;
        } 
    }
    public void cargarDatosTablaAlumno(){
        
        String array[][] = null;
        
        if (listaAlumnos.size() > 0) {
            array = new String [listaAlumnos.size()][6];
            for (int i = 0; i < listaAlumnos.size(); i++) {
                
                array[i][0]= listaAlumnos.get(i).getNombre();
                array[i][1]= listaAlumnos.get(i).getApellido();
                array[i][2]= listaAlumnos.get(i).getDireccion();
                array[i][3]= String.valueOf (listaAlumnos.get(i).getIdAlumno());
                array[i][4]= String.valueOf (listaAlumnos.get(i).getA単oIngreso());
                array[i][5]= listaAlumnos.get(i).getCarrera();
                
                tblAlumno.setModel(new javax.swing.table.DefaultTableModel(
                        array,
                        new String[]{
                            "Nombre","Apellido", "Direccion", "Id Alumno", "A単o Ingreso", "Carrera"
                        }
                ));        
            }
        } else {
            tblAlumno.setModel(new javax.swing.table.DefaultTableModel(
                    array,
                    new String[]{
                         "Nombre","Apellido", "Direccion", "Id Alumno", "A単o Ingreso", "Carrera"
                    }
            ));    
        }   
    }
    public void cargarDatosTablaProfesor(){
        
        String array[][] = null;
        
        if (listaProfesores.size() > 0) {
            array = new String [listaProfesores.size()][6];
            for (int i = 0; i < listaProfesores.size(); i++) {
                
                array[i][0]= listaProfesores.get(i).getNombre();
                array[i][1]= listaProfesores.get(i).getApellido();
                array[i][2]= listaProfesores.get(i).getDireccion();
                array[i][3]= String.valueOf (listaProfesores.get(i).getIdProfesor());
                array[i][4]= listaProfesores.get(i).getTitulo();
                array[i][5]= listaProfesores.get(i).getDepartamento();
                
                tblProfesor.setModel(new javax.swing.table.DefaultTableModel(
                        array,
                        new String[]{
                            "Nombre","Apellido", "Direccion", "Id Profesor", "Titulo", "Departamento"
                        }
                ));        
            }
        } else {
            tblProfesor.setModel(new javax.swing.table.DefaultTableModel(
                    array,
                    new String[]{
                        "Nombre","Apellido", "Direccion", "Id Profesor", "Titulo", "Departamento"
                    }
            ));    
        }   
    }
    
    private void cargarListaAlumnos(){
        Conexion conexion = new Conexion();
        Connection con = conexion.getConexion();
        try {
            PreparedStatement ps = con.prepareStatement("select * from alumnos;");
            ResultSet rs = ps.executeQuery();
            Alumno alumno;
            listaAlumnos.clear();
            while(rs.next()){
                alumno = new Alumno(rs.getString(4), rs.getString(5), rs.getString(6), rs.getInt(1), rs.getInt(2), rs.getString(3));
                listaAlumnos.add(alumno);
            }
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Formulario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     private void cargarListaProfesores(){
        Conexion conexion = new Conexion();
        Connection con = conexion.getConexion();
        try {
            PreparedStatement ps = con.prepareStatement("select * from profesores;");
            ResultSet rs = ps.executeQuery();
           Profesor profesor;
            listaProfesores.clear();
            while(rs.next()){
                profesor = new Profesor(rs.getString(4),rs.getString(5),rs.getString(6), rs.getInt(1), rs.getString(2), rs.getString(3));
                listaProfesores.add(profesor);
            }
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Formulario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void limpiar (){
       txtNombre.setText("");
       txtApellido.setText("");
       txtDireccion.setText("");
       txtIdAlumno.setText("");
       txtA単oIngreso.setText("");
       txtCarrera.setText("");
       txtIdProfesor.setText("");
       txtTitulo.setText("");
       txtDepartamento.setText("");
    }
    private void borrarAlumno() {                                            
        int idAlumno;
        idAlumno = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese el id del alumno a eliminar"));
       
        Conexion conexion = new Conexion();
        Connection con = conexion.getConexion();

            try {
                PreparedStatement ps = con.prepareStatement("select * from alumnos where Id_Alumnos = "+idAlumno+" limit 1;");
                ResultSet rs = ps.executeQuery();


                if(rs.next()){

                    ps = (PreparedStatement) con.prepareStatement("DELETE FROM alumnos WHERE Id_Alumnos=?");
                    ps.setString(1, String.valueOf(idAlumno));

                    int result = ps.executeUpdate();
                    if(result>0){
                        cargarListaAlumnos();
                        cargarDatosTablaAlumno();  
                        JOptionPane.showMessageDialog(null, "Registro eliminado de manera exitosa");                            
                    }else {
                        JOptionPane.showMessageDialog(null, "No se ha podido eliminar el registro");
                    }
               }else{
                    JOptionPane.showMessageDialog(null, "No se ha encontrado el alumno con el id: "+idAlumno);
                }
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(Formulario.class.getName()).log(Level.SEVERE, null, ex);
            }
    } 
    private void borrarProfesor() {                                            
        int idProfesor;
        idProfesor = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese el id del profesor a eliminar"));
       
        Conexion conexion = new Conexion();
        Connection con = conexion.getConexion();

            try {
                PreparedStatement ps = con.prepareStatement("select * from profesores where Id_Profesor = "+idProfesor+" limit 1;");
                ResultSet rs = ps.executeQuery();


                if(rs.next()){

                    ps = (PreparedStatement) con.prepareStatement("DELETE FROM profesores WHERE Id_Profesor=?");
                    ps.setString(1, String.valueOf(idProfesor));

                    int result = ps.executeUpdate();
                    if(result>0){
                        cargarListaProfesores();
                        cargarDatosTablaProfesor();  
                        JOptionPane.showMessageDialog(null, "Registro eliminado de manera exitosa");                            
                    }else {
                        JOptionPane.showMessageDialog(null, "No se ha podido eliminar el registro");
                    }
               }else{
                    JOptionPane.showMessageDialog(null, "No se ha encontrado el profesor con el id: "+idProfesor);
                }
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(Formulario.class.getName()).log(Level.SEVERE, null, ex);
            }
    } 
    private void agregarAlumno() {                                           
       
        String nombre = txtNombre.getText();
        String apellido = txtApellido.getText();
        String direccion = txtDireccion.getText();
        int idAlumno = Integer.parseInt(txtIdAlumno.getText());
        int a単oIngreso = Integer.parseInt(txtA単oIngreso.getText());
        String carrera = txtCarrera.getText();
           
        if (!"".equals(nombre) && !"".equals(apellido) && !"".equals(direccion) && !"".equals(idAlumno) && !"".equals(a単oIngreso) && !"".equals(carrera)) {
            Alumno alumno = new Alumno (nombre,apellido, direccion, idAlumno, a単oIngreso, carrera);
            Conexion conexion = new Conexion();
            Connection con = conexion.getConexion();
            try {
                PreparedStatement ps = con.prepareStatement("insert into alumnos (Id_Alumnos, A単oIngreso, Carrera, Nombre, Apellido, Direccion) values(?,?,?,?,?,?)");
                ps.setInt(1, alumno.getIdAlumno());
                ps.setInt(2, alumno.getA単oIngreso());
                ps.setString(3, alumno.getCarrera());
                ps.setString(4, alumno.getNombre());
                ps.setString(5, alumno.getApellido());
                ps.setString(6, alumno.getDireccion());
                int result = ps.executeUpdate();
                if (result > 0) {
                    cargarListaAlumnos();
                    cargarDatosTablaAlumno();
                    limpiar();
                    JOptionPane.showMessageDialog(null, "Registro ha sido creado exitosamente");
                }else{
                    JOptionPane.showMessageDialog(null, "Registro no se ha creado");
                }
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(Formulario.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
        else {
            JOptionPane.showMessageDialog(null, "Debe completar todos los campos");
        }             
    }  
    private void agregarProfesor() {                                           
       
       String nombre = txtNombre.getText();
        String apellido = txtApellido.getText();
        String direccion = txtDireccion.getText();
        int idProfesor = Integer.parseInt(txtIdProfesor.getText());
        String titulo = txtTitulo.getText();
        String departamento = txtDepartamento.getText();
           
        if (!"".equals(nombre) && !"".equals(apellido) && !"".equals(direccion) && !"".equals(idProfesor) && !"".equals(titulo) && !"".equals(departamento)) {
            Profesor profesor = new Profesor(nombre,apellido, direccion, idProfesor, titulo, departamento);
            Conexion conexion = new Conexion();
            Connection con = conexion.getConexion();
            try {
                PreparedStatement ps = con.prepareStatement("insert into profesores (Id_Profesor, Titulo, Departamento, Nombre, Apellido, Direccion) values(?,?,?,?,?,?)");
                ps.setInt(1, profesor.getIdProfesor());
                ps.setString(2, profesor.getTitulo());
                ps.setString(3, profesor.getDepartamento());
                ps.setString(4, profesor.getNombre());
                ps.setString(5, profesor.getApellido());
                ps.setString(6, profesor.getDireccion());
                int result = ps.executeUpdate();
                if (result > 0) {
                    cargarListaProfesores();
                    cargarDatosTablaProfesor();
                    limpiar();
                    JOptionPane.showMessageDialog(null, "Registro ha sido creado exitosamente");
                }else{
                    JOptionPane.showMessageDialog(null, "Registro no se ha creado");
                }
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(Formulario.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
        else {
            JOptionPane.showMessageDialog(null, "Debe completar todos los campos");
        }             
    }  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Formulario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Departamento;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnCargarTabla;
    private javax.swing.JButton btnInsertar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rBtnAlumno;
    private javax.swing.JRadioButton rBtnProfesor;
    private javax.swing.JTable tblAlumno;
    private javax.swing.JTable tblProfesor;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtA単oIngreso;
    private javax.swing.JTextField txtCarrera;
    private javax.swing.JTextField txtDepartamento;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtIdAlumno;
    private javax.swing.JTextField txtIdProfesor;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables
}
